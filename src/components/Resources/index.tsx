import { useEffect, useState } from "react";
import { useChangesStore } from "../../stores/changesStore";
import { useSaveStore } from "../../stores/saveStore";

type Props = {
  name: string;
  uuid: number[];
}

const resources = {
  Credits: [
    0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x49, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ],
  Scrip: [
    0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x49,
    0x6e, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x04,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  ],
  Core: [
    0xa1, 0x0c, 0xb2, 0x85, 0x38, 0x71, 0xfb, 0x49, 0x9a, 0xc8, 0x54, 0xa1,
    0xcd, 0xe2, 0x20, 0x2c,
  ],
  Bismor: [
    0xaf, 0x0d, 0xc4, 0xfe, 0x83, 0x61, 0xbb, 0x48, 0xb3, 0x2c, 0x92, 0xcc,
    0x97, 0xe2, 0x1d, 0xe7,
  ],
  Magnite: [
    0xaa, 0xde, 0xd8, 0x76, 0x6c, 0x22, 0x7d, 0x40, 0x80, 0x32, 0xaf, 0xd1,
    0x8d, 0x63, 0x56, 0x1e,
  ],

  Data: [
    0x99, 0xfa, 0x52, 0x6a, 0xd8, 0x77, 0x48, 0x45, 0x94, 0x98, 0x90, 0x5a,
    0x27, 0x86, 0x93, 0xf6,
  ],
  Croppa: [
    0x8a, 0xa7, 0xfb, 0x43, 0x29, 0x3a, 0x0b, 0x49, 0xb8, 0xbe, 0x42, 0xff,
    0xe0, 0x68, 0xa4, 0x4c,
  ],
  Starch: [
    0x72, 0x31, 0x22, 0x04, 0xe2, 0x87, 0xbc, 0x41, 0x81, 0x55, 0x40, 0xa0,
    0xcf, 0x88, 0x12, 0x80,
  ],
  Phazyonite: [
    0x67, 0x66, 0x8a, 0xae, 0x82, 0x8f, 0xdb, 0x48, 0xa9, 0x11, 0x1e, 0x1b,
    0x91, 0x2d, 0xbf, 0xa4,
  ],
  Umanite: [
    0x5f, 0x2b, 0xcf, 0x83, 0x47, 0x76, 0x0a, 0x42, 0xa2, 0x3b, 0x6e, 0xdc,
    0x07, 0xc0, 0x94, 0x1d,
  ],
  Error: [
    0x58, 0x28, 0x65, 0x2c, 0x9a, 0x5d, 0xe8, 0x45, 0xa9, 0xe2, 0xe1, 0xb8,
    0xb4, 0x63, 0xc5, 0x16,
  ],
  Enor: [
    0x48, 0x8d, 0x05, 0x14, 0x6f, 0x5f, 0x75, 0x4b, 0xa3, 0xd4, 0x61, 0x0d,
    0x08, 0xc0, 0x60, 0x3e,
  ],
  Malt: [
    0x41, 0xea, 0x55, 0x0c, 0x1d, 0x46, 0xc5, 0x4b, 0xbe, 0x2e, 0x9c, 0xa5,
    0xa7, 0xac, 0xcb, 0x06,
  ],
  Barley: [
    0x22, 0xda, 0xa7, 0x57, 0xad, 0x7a, 0x80, 0x49, 0x89, 0x1b, 0x17, 0xed,
    0xcc, 0x2f, 0xe0, 0x98,
  ],
  Jadiz: [
    0x22, 0xbc, 0x4f, 0x7d, 0x07, 0xd1, 0x3e, 0x43, 0xbf, 0xca, 0x81, 0xbd,
    0x9c, 0x14, 0xb1, 0xaf,
  ],
  Yeast: [
    0x07, 0x85, 0x48, 0xb9, 0x32, 0x32, 0xc0, 0x40, 0x85, 0xf8, 0x92, 0xe0,
    0x84, 0xa7, 0x41, 0x00,
  ],
};

const Resource = ({ name, uuid }: Props) => {

  const [amount, setAmount] = useState(0);
  const [oldAmount, setOldAmount] = useState(0);
  const [resourceOffset, setResourceOffset] = useState(0);

  const { save, setSave } = useSaveStore();
  const { increment } = useChangesStore();

  const handleChanged = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(e.target.value);
    if (isNaN(value)) {
      setAmount(0);
      return;
    }
    setAmount(value);
    setOldAmount(amount);
  };

  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const value = parseInt(e.target.value);
    if (isNaN(value)) return;
    if (value === oldAmount) return;

    increment();
    const view = new DataView(new ArrayBuffer(4));
    view.setFloat32(0, value, true);

    const u8 = new Uint8Array(view.buffer);

    save.set(u8, resourceOffset);
    setSave(save);
  };

  const handleMax = () => {
    let max = 0x0fffffff;

    if (amount === max) return;
    const view = new DataView(new ArrayBuffer(4));
    if (["Credits", "Scrip"].includes(name)) {
      view.setUint32(0, max, true);
    } else {
      view.setFloat32(0, max, true);
    }

    const u8 = new Uint8Array(view.buffer);

    save.set(u8, resourceOffset);
    setSave(save);
    setAmount(max);
    setOldAmount(amount);
    increment();
  };

  useEffect(() => {
    const resourceIndex = save.indexOfMulti(uuid, 0x42d);
    setResourceOffset(resourceIndex + uuid.length);
    const data = save.slice(
      resourceIndex + uuid.length,
      resourceIndex + uuid.length + 4
    );
    const view = new DataView(data.buffer);

    let value = 0;

    // little hackish but it works
    if (["Credits", "Scrip"].includes(name)) {
      value = view.getUint32(0, true);
    } else {
      value = view.getFloat32(0, true);
    }
    setAmount(value);
    setOldAmount(value);
  }, [save]);

  return (
    <div className="block">

      <label htmlFor={name.toLowerCase()} className="label-text">
        {name}
      </label>
      <div className="input-group">
        <span className="pointer-events-none select-none border-drg-primary-700 border">
          <img src={`assets/${name.toLowerCase()}.webp`} className="w-6 max-w-none" />
        </span>
        <input
          id={name.toLowerCase()}
          type="text"
          className="input bg-transparent border-drg-primary-700 w-full lg:w-32"
          value={amount}
          onChange={handleChanged}
          onBlur={handleBlur}
        />
        <button className="btn btn-square bg-drg-primary-400 hover:bg-drg-secondary-500 text-slate-900" onClick={handleMax}>
          Max
        </button>
      </div>
    </div>
  );
};

export const Resources = () => {
  return (
      <div className="w-full md:w-auto grid grid-cols grid-rows-4 gap-2 md:grid-cols-2 lg:grid-cols-2 lg:gap-x-10 xl:grid-cols-3">
        {Object.entries(resources).map(([name, id]) => (
          <Resource key={name} name={name} uuid={id} />
        ))}
      </div>
  );
};
